- name: Configure Hackbox

  hosts: all

  become: true

  environment:
    DEBIAN_FRONTEND: noninteractive

  vars:

    ansible_python_interpreter: /usr/bin/python3

    tools_apt_packages:
      - autorecon
      - binwalk
      - burpsuite
      - cadaver
      - curl
      - davtest
      - fish
      - fzf
      - hydra
      - impacket-scripts
      - john
      - jq
      - metasploit-framework
      - neovim
      - netexec
      - nmap
      - nuclei
      - openvpn
      - pipx
      - python-is-python3
      - python3-venv
      - responder
      - exploitdb
      - ripgrep
      - smbmap
      - sqlmap
      - wireshark
      - wordlists
      - xclip

    tools_pipx_packages:
      - pypykatz
      - wesng

  tasks:
    - name: Update and upgrade the system
      apt:
        update_cache: yes
        upgrade: full

    - name: Remove unnecessary packages
      apt:
        autoremove: yes

    - name: Install desktop
      apt:
        name: kali-desktop-xfce
        state: latest
        
    - name: Install tools via apt
      apt:
        name: "{{ item }}"
        state: latest
      loop: "{{ tools_apt_packages }}"

    - name: Install tools via pipx
      community.general.pipx:
        executable: /usr/bin/pipx
        global: true
        state: latest
        name: "{{ item }}"
      loop: "{{ tools_pipx_packages }}"

    - name: Download Zellij
      get_url:
        url: https://github.com/zellij-org/zellij/releases/latest/download/zellij-x86_64-unknown-linux-musl.tar.gz
        dest: /tmp/

    - name: Extract Zellij
      unarchive:
        remote_src: yes
        src: /tmp/zellij-x86_64-unknown-linux-musl.tar.gz
        dest: /tmp/

    - name: Install Zellij
      copy:
        remote_src: yes
        src: /tmp/zellij
        dest: /usr/bin/
        mode: '0755'

    - name: Ensure /root/.config/zellij
      file:
        path: /root/.config/zellij
        state: directory

    - name: Check if /root/.config/zellij/config.kdl exists
      stat:
        path: "/root/.config/zellij/config.kdl"
      register: zellij_config

    - name: Dump Zellij config
      when: not zellij_config.stat.exists
      shell: zellij setup --dump-config > /root/.config/zellij/config.kdl

    - name: Configure Zellij - copy with xclip
      replace:
        path: /root/.config/zellij/config.kdl
        regexp: '// copy_command "xclip'
        replace: 'copy_command "xclip'

    - name: Zellij / QTerminal compatibility - ensure /root/.config/qterminal.org
      file:
        state: directory
        path: /root/.config/qterminal.org

    - name: Zellij / QTerminal compatibility - check /root/.config/qterminal.org/qterminal.ini
      stat:
        path: /root/.config/qterminal.org/qterminal.ini
      register: qterminal_config
    
    - name: Zellij / QTerminal compatibility - set 'emulation' to 'linux'
      when: not qterminal_config.stat.exists
      copy:
        dest: /root/.config/qterminal.org/qterminal.ini
        content: |
          [General]
          emulation=linux

    - name: Find latest Helix version
      shell:
        curl -s https://api.github.com/repos/helix-editor/helix/releases/latest | jq -r '.name'
      changed_when: false
      register: helix_version

    - name: Download Helix
      get_url:
        url: "https://github.com/helix-editor/helix/releases/latest/download/helix-{{ helix_version.stdout }}-x86_64-linux.tar.xz"
        dest: /tmp/

    - name: Extract Helix
      unarchive:
        remote_src: yes
        src: "/tmp/helix-{{ helix_version.stdout }}-x86_64-linux.tar.xz"
        dest: /opt/

    - name: Install Helix
      file:
        src: "/opt/helix-{{ helix_version.stdout }}-x86_64-linux/hx"
        dest: /usr/bin/hx
        state: link

    - name: Ensure /root/.config/helix
      file: 
        path: /root/.config/helix
        state: directory

    - name: Configure Helix
      copy: 
        dest: /root/.config/helix/config.toml
        content: |
            theme = "term16_dark"

            [editor.cursor-shape]
            insert = "bar"
            normal = "block"
            select = "underline"

    - name: Change shell to fish
      user:
        name: root
        shell: /usr/bin/fish

    - name: Configure fish
      copy:
        dest: /etc/fish/config.fish
        content: |
          set fish_greeting
          
          function fish_prompt
              set -g __fish_git_prompt_showdirtystate 1
              set -g __fish_git_prompt_showuntrackedfiles 1
              set -g __fish_git_prompt_showstashstate 1
              set -g __fish_git_prompt_showupstream auto
              set -l symbol ' $ '
              if fish_is_root_user
                  set symbol ' # '
              end
              echo -n $USER@$hostname
              echo -n (prompt_pwd)
              echo -n (fish_git_prompt)
              echo -n $symbol
          end
          
          fish_vi_key_bindings
          set fish_cursor_default block
          set fish_cursor_insert line
          set fish_cursor_replace_one underscore
          set fish_cursor_visual block
          set fish_vi_force_cursor 1
          
          function fish_title
              set -q argv[1]; or set argv fish: (fish_prompt_pwd_dir_length=1 prompt_pwd)
                   echo $argv
          end
          
          function pbcopy
              xclip -in -selection clipboard
              xclip -out -selection clipboard | xclip -in -selection primary
          end
          
          function pbpaste
              xclip -out -selection clipboard
          end

          fzf --fish | source
          
          set -x EDITOR hx

    - name: Reset connection
      meta: reset_connection

    - name: Unarchive rockyou.txt
      unarchive:
        src: /usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt.tar.gz
        dest: /usr/share/seclists/Passwords/Leaked-Databases/
        remote_src: yes

    - name: Run updatedb
      shell: updatedb

    - name: Set default application for text files
      shell: xdg-mime default org.xfce.mousepad.desktop text/plain

    - name: Install VNC
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - tigervnc-standalone-server
        - tigervnc-xorg-extension
      tags: cloud
    
    - name: Configure /etc/hosts file
      copy:
        dest: /etc/hosts
        content: |
          # /etc/hosts
          127.0.0.1   kali localhost

          # The following lines are desirable for IPv6 capable hosts
          ::1         localhost ip6-localhost ip6-loopback
          ff02::1     ip6-allnodes
          ff02::2     ip6-allrouters
        owner: root
        group: root
        mode: '0644'
      tags:
        - cloud
      
    - name: Ensure /root/.config/tigervnc directory exists
      file:
        path: /root/.config/tigervnc
        state: directory
        mode: '0755'
      tags:
        - cloud

    - name: Create VNC xstartup file
      copy:
        dest: /root/.config/tigervnc/xstartup
        content: |
          exec startxfce4
        owner: root
        group: root
        mode: '0755'
      tags:
        - cloud

    - name: Check if /root/.config/tigervnc/passwd exists
      stat:
        path: "/root/.config/tigervnc/passwd"
      register: vnc_passwd
      tags:
        - cloud

    - name: VNC server password prompt
      pause:
        prompt: "Enter VNC server password"
        echo: false
      when: not vnc_passwd.stat.exists
      register: vnc_password
      tags:
        - cloud

    - name: Set VNC server password
      shell: echo -n '{{ vnc_password.user_input }}' | vncpasswd -f > /root/.config/tigervnc/passwd && chmod 600 /root/.config/tigervnc/passwd
      when: not vnc_passwd.stat.exists
      tags:
        - cloud

    - name: Check if port 5901 is listening
      shell: "ss -tuln | grep ':5901'"
      ignore_errors: true
      register: vnc_port_check
      changed_when: false
      tags:
        - cloud

    - name: Start VNC server
      command: vncserver -localhost yes :1
      when: vnc_port_check.rc != 0
      tags:
        - cloud
