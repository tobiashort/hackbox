- name: Configure Hackbox

  hosts: all

  become: true

  environment:
    DEBIAN_FRONTEND: noninteractive

  vars:

    ansible_python_interpreter: /usr/bin/python3

    tools_apt_packages:
      - autorecon
      - binwalk
      - burpsuite
      - cadaver
      - curl
      - davtest
      - hydra
      - impacket-scripts
      - john
      - jq
      - metasploit-framework
      - netexec
      - nmap
      - nuclei
      - openvpn
      - pipx
      - python-is-python3
      - python3-venv
      - responder
      - exploitdb
      - smbmap
      - sqlmap
      - wireshark
      - wordlists

    tools_pipx_packages:
      - pypykatz
      - wesng

  tasks:
    - name: Update and upgrade the system
      apt:
        update_cache: yes
        upgrade: full
      tags:
        - system

    - name: Remove unnecessary packages
      apt:
        autoremove: yes
      tags:
        - system

    - name: Install desktop
      apt:
        name: kali-desktop-xfce
        state: latest
      tags:
        - desktop
        
    - name: Install tools apt packages
      apt:
        name: "{{ item }}"
        state: latest
      loop: "{{ tools_apt_packages }}"
      tags:
        - tools

    - name: Install tools pipx packages
      community.general.pipx:
        executable: /usr/bin/pipx
        global: true
        state: latest
        name: "{{ item }}"
      loop: "{{ tools_pipx_packages }}"
      tags:
        - tools

    - name: Download zellij
      get_url:
        url: https://github.com/zellij-org/zellij/releases/latest/download/zellij-x86_64-unknown-linux-musl.tar.gz
        dest: /tmp/
      register: zellij_downloaded

    - name: Extract zellij
      when: zellij_downloaded
      unarchive:
        remote_src: yes
        src: /tmp/zellij-x86_64-unknown-linux-musl.tar.gz
        dest: /tmp/
      register: zellij_extracted

    - name: Install zellij
      when: zellij_extracted
      copy:
        remote_src: yes
        src: /tmp/zellij
        dest: /usr/bin/

    - name: Find latest helix version
      shell:
        curl -s https://api.github.com/repos/helix-editor/helix/releases/latest | jq -r '.name'
      changed_when: false
      register: helix_version

    - name: Download helix
      when: helix_version
      get_url:
        url: "https://github.com/helix-editor/helix/releases/latest/download/helix-{{ helix_version.stdout }}-x86_64-linux.tar.xz"
        dest: /tmp/
      register: helix_downloaded

    - name: Extract helix
      when: helix_downloaded
      unarchive:
        remote_src: yes
        src: "/tmp/helix-{{ helix_version.stdout }}-x86_64-linux.tar.xz"
        dest: /opt/
      register: helix_extracted

    - name: Install helix
      when: helix_extracted
      file:
        src: "/tmp/helix-{{ helix_version.stdout }}-x86_64-linux/hx"
        dest: /usr/bin/hx
        state: link

    - name: Unarchive rockyou.txt
      unarchive:
        src: /usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt.tar.gz
        dest: /usr/share/seclists/Passwords/Leaked-Databases/
        remote_src: yes
      tags:
        - tools

    - name: Install VNC
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - tigervnc-standalone-server
        - tigervnc-xorg-extension
      tags: cloud
    
    - name: Configure /etc/hosts file
      copy:
        dest: /etc/hosts
        content: |
          # /etc/hosts
          127.0.0.1   kali localhost

          # The following lines are desirable for IPv6 capable hosts
          ::1         localhost ip6-localhost ip6-loopback
          ff02::1     ip6-allnodes
          ff02::2     ip6-allrouters
        owner: root
        group: root
        mode: '0644'
      tags:
        - cloud
      
    - name: Ensure /root/.config/tigervnc directory exists
      file:
        path: /root/.config/tigervnc
        state: directory
        mode: '0755'
      tags:
        - cloud

    - name: Create VNC xstartup file
      copy:
        dest: /root/.config/tigervnc/xstartup
        content: |
          exec startxfce4
        owner: root
        group: root
        mode: '0755'
      tags:
        - cloud

    - name: Check if /root/.config/tigervnc/passwd exists
      stat:
        path: "/root/.config/tigervnc/passwd"
      register: vnc_passwd
      tags:
        - cloud

    - name: VNC server password prompt
      pause:
        prompt: "Enter VNC server password"
        echo: false
      when: not vnc_passwd.stat.exists
      register: vnc_password
      tags:
        - cloud

    - name: Set VNC server password
      command: bash -c "echo '{{ vnc_password }}' | vncpasswd -f > /root/.config/tigervnc/passwd && chmod 600 /root/.config/tigervnc/passwd"
      when: not vnc_passwd.stat.exists
      tags:
        - cloud

    - name: Check if port 5901 is listening
      shell: "ss -tuln | grep ':5901'"
      ignore_errors: true
      register: vnc_port_check
      changed_when: false
      tags:
        - cloud

    - name: Start VNC server
      command: vncserver -localhost yes :1
      when: vnc_port_check.rc != 0
      tags:
        - cloud
